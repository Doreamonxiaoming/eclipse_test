<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>club.zhangmingwei</groupId>
  <artifactId>ide_git_test</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
  <build>
		<finalName>app</finalName>
		<plugins>
			<!-- 编译器插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>     
				<configuration>
					<source>1.8</source><!-- 源代码使用的JDK版本 -->   
					<target>1.8</target><!-- 需要生成的目标class文件的编译版本 -->  
					<encoding>UTF-8</encoding><!-- 字符集编码 -->
				</configuration>
			</plugin>
			
			<!-- 打包插件 -->
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-jar-plugin</artifactId>
		        <version>2.4</version>
		        <configuration>
		          <archive>
		          	<!-- 把本地的第三方jar包添加到MANIFEST.MF文件中,可以解压打包后的jar包查看MANIFEST.MF文件 -->
		            <manifest>
		              <!-- 指定Main方法入口的class
		              	   Main-Class: 指定当前jar包的入口class
		              -->
		              <mainClass>package1.Demo1</mainClass>
		              
		              <!-- 在jar包的MANIFEST.MF文件中生成Class-Path属性 -->
		              <addClasspath>true</addClasspath>
		              <!--
		              	Class-Path 前缀
			            Class-Path: 指定当前jar包执行所依赖的classpath,包括本地的第三方jar包和maven引入的jar包
			            Class-Path: lib/junit-4.12.jar lib/hamcrest-core-1.3.jar lib/fastjson-1.2.51.jar
			          -->
		              <classpathPrefix>lib/</classpathPrefix>
		            </manifest>
		            
		            <!-- 由于某些原因，如果maven生成的MANIFEST.MF中的Class-Path的内容缺少一些内容，
		            		比如当前执行目录(.)，那么可以通过下面manifestEntries的方式增加进来 -->
		            <manifestEntries>
		              <Class-Path>.</Class-Path>
		            </manifestEntries>
		          </archive>
		        </configuration>
		      </plugin>
		      <!-- 拷贝依赖的jar包到lib目录 -->
		      <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-dependency-plugin</artifactId>
		        <executions>
		          <execution>
		            <id>copy</id>
		            <phase>package</phase>
		            <goals>
		              <goal>copy-dependencies</goal>
		            </goals>
		            <configuration>
		              <!-- ${project.build.directory} 构建目录，缺省为target -->
		              <outputDirectory>
		                ${project.build.directory}/lib
		              </outputDirectory>
		            </configuration>
		          </execution>
		        </executions>
		      </plugin>
		</plugins>
	</build>
</project>